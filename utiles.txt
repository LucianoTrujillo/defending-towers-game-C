#include <stdio.h>
#include "utiles.h"
#include "defendiendo_torres.h"
#include <time.h>
#include <errno.h>

int msleep(long msec)
{
    struct timespec ts;
    int res;

    if (msec < 0)
    {
        errno = EINVAL;
        return -1;
    }

    ts.tv_sec = msec / 1000;
    ts.tv_nsec = (msec % 1000) * 1000000;

    do
    {
        res = nanosleep(&ts, &ts);
    } while (res && errno == EINTR);

    return res;
}

void move_closer_x(coordenada_t past, coordenada_t *current, coordenada_t end)
{
    if (past.col > end.col)
    {
        current->col = past.col - 1;
        current->fil = past.fil;
    }
    else
    {
        current->col = past.col + 1;
        current->fil = past.fil;
    }
}

void move_closer_y(coordenada_t past, coordenada_t *current, coordenada_t end)
{
    if (past.fil > end.fil)
    {
        current->fil = past.fil - 1;
        current->col = past.col;
    }
    else
    {
        current->fil = past.fil + 1;
        current->col = past.col;
    }
}

void getPath(coordenada_t path[MAX_LONGITUD_CAMINO], coordenada_t start, coordenada_t end, int *max, int start_index)
{
    path[start_index] = start;
    int i = start_index + 1;

    while (path[i - 1].col != end.col)
    {
        move_closer_x(path[i - 1], &(path[i]), end);
        i++;
    }

    while (path[i - 1].fil != end.fil)
    {
        move_closer_y(path[i - 1], &(path[i]), end);
        i++;
    }

    *max = i;
}

coordenada_t random_coordenada_between(coordenada_t start, coordenada_t end)
{
    return (coordenada_t){.col = (start.col + end.col) / 2, .fil = (start.fil + end.fil) / 2};
}

void get_random_path(coordenada_t path[MAX_LONGITUD_CAMINO], coordenada_t start, coordenada_t end, int *max)
{
    coordenada_t between = random_coordenada_between(start, end);
    getPath(path, start, between, max, 0);
    getPath(path, between, end, max, *max - 1);
}

/*
 * Generará un camino aleatorio desde la entrada hasta la torre.
 * Las coordenadas de entrada fil de la torre deben ser válidas. 
 */
void obtener_camino(coordenada_t camino[MAX_LONGITUD_CAMINO], int *tope_camino, coordenada_t entrada, coordenada_t torre)
{
    get_random_path(camino, entrada, torre, tope_camino);
}

/*
 * Detendrá el tiempo los segundos indicados como parámetro.
 * Ejemplos: 
 * - Para detener medio segundo se deberá llamar detener_el_tiempo(0.5)
 * - Para detener dos segundos se deberá llamar detener_el_tiempo(2)  
 */
void detener_el_tiempo(float segundos)
{
    msleep((long)(segundos * 1000));
}